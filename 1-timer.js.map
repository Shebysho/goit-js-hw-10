{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst startBtn = document.querySelector('[data-start]');\nconst daysValue = document.querySelector('[data-days]');\nconst hoursValue = document.querySelector('[data-hours]');\nconst minutesValue = document.querySelector('[data-minutes]');\nconst secondsValue = document.querySelector('[data-seconds]');\nlet timerId = null;\nlet userSelectedDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    const currentDate = new Date();\n    if (userSelectedDate < currentDate) {\n      startBtn.disabled = true;\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nstartBtn.addEventListener('click', () => {\n  startBtn.disabled = true;\n  document.querySelector('#datetime-picker').disabled = true;\n  timerId = setInterval(() => {\n    const currentDate = new Date();\n    const timeDifference = userSelectedDate - currentDate;\n\n    if (timeDifference <= 0) {\n      clearInterval(timerId);\n      document.querySelector('#datetime-picker').disabled = false;\n      return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(timeDifference);\n    daysValue.textContent = addLeadingZero(days);\n    hoursValue.textContent = addLeadingZero(hours);\n    minutesValue.textContent = addLeadingZero(minutes);\n    secondsValue.textContent = addLeadingZero(seconds);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}"],"names":["startBtn","daysValue","hoursValue","minutesValue","secondsValue","timerId","userSelectedDate","options","selectedDates","iziToast","flatpickr","timeDifference","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"sGAKA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAC5D,IAAIC,EAAU,KACVC,EAAmB,KAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,CAAC,EAE9BF,EADgB,IAAI,MAEtBN,EAAS,SAAW,GACpBS,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,GAEDT,EAAS,SAAW,EAEvB,CACH,EAEAU,EAAU,mBAAoBH,CAAO,EAErCP,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpB,SAAS,cAAc,kBAAkB,EAAE,SAAW,GACtDK,EAAU,YAAY,IAAM,CAE1B,MAAMM,EAAiBL,EADH,IAAI,KAGxB,GAAIK,GAAkB,EAAG,CACvB,cAAcN,CAAO,EACrB,SAAS,cAAc,kBAAkB,EAAE,SAAW,GACtD,MACD,CAED,KAAM,CAAE,KAAAO,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAc,EAClEV,EAAU,YAAcgB,EAAeL,CAAI,EAC3CV,EAAW,YAAce,EAAeJ,CAAK,EAC7CV,EAAa,YAAcc,EAAeH,CAAO,EACjDV,EAAa,YAAca,EAAeF,CAAO,CAClD,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUE,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}